
----------------------------------------------------------
-----------------Paquete: implementacion ----------------
--------------- Clase: InterfacePrototype ---------------
------------------- Tipo: Interface ---------------------
----------------------------------------------------------
/*
 * Asignatura: Patrones de Diseño de Software 
 * Patrón Creacional - > Prototype
 * Tipo de Clase: Interface
 * Clase que implementa la interface Cloneable para aprovechar la funcionalidad de clonación estándar de Java.
 * Definimos el tipo genérico T para asegurarnos de que todos los prototipos implementen la interface InterfacePrototype.
 */
package implementacion;

/**
 *
 * @author Fabrizio Bolaño
 */
public interface InterfacePrototype <T extends InterfacePrototype> extends Cloneable {
    public T clone();
    public T deepClone();
}



----------------------------------------------------------
-----------------Paquete: implementacion -----------------
----------- Clase: CatalogoProductos.java ----------------
----------------------------------------------------------
/*
 * Asignatura: Patrones de Diseño de Software 
 * Patrón Creacional - > Prototype
 * Tipo de Clase: Java
 * Clase para manejar el catalogo de productos ofertados.
  */
package implementacion;

/**
 *
 * @author Fabrizio Bolaño
 */
public class CatalogoProductos implements InterfacePrototype<CatalogoProductos> {
    private String nombreProducto;
    private double precioProducto;
    
    public CatalogoProductos(){
    }

    public CatalogoProductos(String nombre, double precio) {
        this();
        this.nombreProducto = nombre;
        this.precioProducto = precio;
    }
    
    public String getNombreProducto() {
        return nombreProducto;
    }

    public void setNombreProducto(String nombreProducto) {
        this.nombreProducto = nombreProducto;
    }

    public double getPrecioProducto() {
        return precioProducto;
    }

    public void setPrecioProducto(double precioProducto) {
        this.precioProducto = precioProducto;
    }
    
        
    @Override
    public CatalogoProductos clone() {
        return new CatalogoProductos(this.nombreProducto,this.precioProducto);
    }

    @Override
    public CatalogoProductos deepClone() {
        return clone();
    }

    @Override
    public String toString() {
        return "Catalogo{" + "nombreProducto=" + nombreProducto + ", precioProducto=" + precioProducto + '}';
        
    }

    
    
}

----------------------------------------------------------
-----------------Paquete: implementacion -----------------
----------- Clase: FabricaPrototype.java ----------------
----------------------------------------------------------
/*
 * Asignatura: Patrones de Diseño de Software 
 * Patrón Creacional - > Prototype
 * Tipo de Clase: Java
 * Clase para deelegarle la responsabilidad de crear los prototipos.
 */
package implementacion;

import java.util.HashMap;
import java.util.Map;

/**
 *
 * @author Fabrizio Bolaño
 */
public class FabricaPrototype {
    private static Map<String,InterfacePrototype> prototypes = new HashMap<String, InterfacePrototype>();
    
    public static InterfacePrototype getPrototype(String prototypeName){
        return prototypes.get(prototypeName).deepClone();
    }
    
    public static void addPrototype(String prototypeName,InterfacePrototype prototype){
        prototypes.put(prototypeName, prototype);
    }
}

----------------------------------------------------------
-----------------Paquete: implementacion -----------------
---------------- Clase: ListaPrecios.java ----------------
----------------------------------------------------------
/*
 * Asignatura: Patrones de Diseño de Software 
 * Patrón Creacional - > Prototype
 * Tipo de Clase: Java
 * Clase para manejar la lista de precios y sus variantes.
  */
package implementacion;

import java.util.ArrayList;
import java.util.List;

/**
 *
 * @author Fabrizio Bolaño
 */
public class ListaPrecios implements InterfacePrototype<ListaPrecios> {

    private String listado;
    private List<CatalogoProductos> productos = new ArrayList<CatalogoProductos>();

     public ListaPrecios(String lista) {
        this.listado = lista;
    }
    
    public String getListado() {
        return listado;
    }

    public void setListado(String listado) {
        this.listado = listado;
    }

    public List<CatalogoProductos> getProductos() {
        return productos;
    }

    public void setProductos(List<CatalogoProductos> productos) {
        this.productos = productos;
    }

     public void addCatalogoItem(CatalogoProductos item){
        this.productos.add(item);
    }
    
    
    @Override
    public ListaPrecios clone() {
         ListaPrecios clone = new ListaPrecios(listado);
        clone.setProductos(productos);
        return clone;
    }

    @Override
    public ListaPrecios deepClone() {
         List<CatalogoProductos> cloneProducts = new ArrayList<>();
        for(CatalogoProductos item : this.productos){
            CatalogoProductos cloneItem = item.clone();
            cloneProducts.add(cloneItem);
        }
        ListaPrecios clone = new ListaPrecios(listado);
        clone.setProductos(cloneProducts);
        return clone;
    }

    @Override
    public String toString() {
        String items = "";
        String newline = System.getProperty("line.separator");
        for(CatalogoProductos item : this.productos){
            items += "\t" + item.toString() + "\n";            
            
            }
        //return "Lista de Precios del Catalogo {" + "listado=" + listado + ", productos=" + productos + '}';
        return "Lista de Precios{Tipo de Lista:=" + listado + ", Productos=\n" + items + '}';
        
    }
    
    
}

-------------------------------------------------------
-------------Paquete: patronprototype -----------------
----------- Clase: PatronPrototypeMain.java -----------
----------------- Tipo: Main() ------------------------
-------------------------------------------------------
/*
 * Asignatura: Patrones de Diseño de Software 
 * Patrón Creacional - > Prototype
 * Tipo de Clase: Main()
 */
package patronprototype;

import implementacion.CatalogoProductos;
import implementacion.FabricaPrototype;
import implementacion.ListaPrecios;
/**
 *
 * @author Fabrizio Bolaño
 */
public class PatronPrototypeMain {

    public static void main(String[] args) {
        
        
        //Creación de la Lista Inicial de Precios
        
        ListaPrecios listadoEstandar = new ListaPrecios("Lista Estándar de Precios");
        for(int c = 1; c<=5; c++){
            CatalogoProductos item = new CatalogoProductos("Producto " + c, c*2);
            listadoEstandar.addCatalogoItem(item);
        }
        
        //Segunda lista para clientes mayoristas.
        //Se obtiene del listado estándar con un 10% de descuento.
        
        FabricaPrototype.addPrototype(listadoEstandar.getListado(), listadoEstandar);
        
        ListaPrecios listadoPorMayor = (ListaPrecios)
        FabricaPrototype.getPrototype("Lista Estándar de Precios");
        listadoPorMayor.setListado("Listado de Precios al Por Mayor");
        
        for(CatalogoProductos item : listadoPorMayor.getProductos()){
            item.setPrecioProducto(item.getPrecioProducto()*0.90);
        }
        FabricaPrototype.addPrototype(listadoPorMayor.getListado(), listadoPorMayor);
        
        //Tercera lista de precios para clientes Especiales.
        //Se obtiene de la listado Mayorista menos un 10%.
        ListaPrecios listadoClientesEspeciales = (ListaPrecios)
        FabricaPrototype.getPrototype("Listado de Precios al Por Mayor");
        listadoClientesEspeciales.setListado("Listado de Precios Clientes Especiales");
        
        for(CatalogoProductos item : listadoClientesEspeciales.getProductos()){
            item.setPrecioProducto(item.getPrecioProducto()*0.90);
        }
        
        //Imprimimos las diferentes listas.
        System.out.println(listadoEstandar);
        System.out.println(listadoPorMayor);
        System.out.println(listadoClientesEspeciales);
        
        
    }
    
}
