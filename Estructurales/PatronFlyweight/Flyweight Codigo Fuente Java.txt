
----------------------------------------------------------
----------- PATRON ESTRUCTURAL FlyWeight --------------------
----------------------------------------------------------

----------------------------------------------------------
----------------Paquete: implementacion------------------
-------------------- Clase: Cancion ---------------------
--------------------- Tipo: java ------------------------
---------------------------------------------------------
/*
 * Asignatura: Patrones de Diseño de Software 
 * Patrón Estructural - > Flyweight
 * Tipo de Clase: Java
 */

package implementacion;

/**
 *
 * @author Fabrizio Bolaño
 */
public class Cancion {
    private Long id;
    private String NombreCancion;
    private byte[] Cancion = new byte[1000000];
    
     public Cancion(Long id, String NombreCancion) {
        this.id = id;
        this.NombreCancion = NombreCancion;
    }

    public Cancion() {
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getNombreCancion() {
        return NombreCancion;
    }

    public void setNombreCancion(String NombreCancion) {
        this.NombreCancion = NombreCancion;
    }

    @Override
    public String toString() {
        return "Canciòn{" + "id=" + id + ", Tema=" + NombreCancion + '}';
    }
    
    
}

----------------------------------------------------------
----------------Paquete: implementacion------------------
---------------- Clase: FabricaCanciones ----------------
--------------------- Tipo: java ------------------------
---------------------------------------------------------
/*
 * Asignatura: Patrones de Diseño de Software 
 * Patrón Estructural - > Flyweight
 * Tipo de Clase: Java
 */
package implementacion;

import java.util.HashMap;
import java.util.Map;


/**
 *
 * @author Fabrizio Bolaño
 */
public class FabricaCanciones {
    
    public static boolean HabilitarFlyweight = true;
    private static final Map<String,Cancion> PLAY_CANCION = new HashMap<>();
    private static Long Secuencia = 0L;
    
     public static Cancion CrearItem(String NombreTema){
        if(HabilitarFlyweight && PLAY_CANCION.containsKey(NombreTema)){
            return PLAY_CANCION.get(NombreTema);
        }else{
            Cancion playItem = new Cancion(++Secuencia, NombreTema);
            PLAY_CANCION.put(NombreTema, playItem);
            return playItem;
        }
    }
}



----------------------------------------------------------
----------------Paquete: implementacion------------------
--------------- Clase: ListaReproduccion ----------------
--------------------- Tipo: java ------------------------
---------------------------------------------------------
/*
 * Asignatura: Patrones de Diseño de Software 
 * Patrón Estructural - > Flyweight
 * Tipo de Clase: Java
 */
package implementacion;

import java.util.ArrayList;
import java.util.List;

/**
 *
 * @author Fabrizio Bolaño
 */
public class ListaReproduccion {
    private String NombreLista;
    private List<Cancion> Canciones = new ArrayList<>();
    
    public ListaReproduccion(String NombreLista) {
        this.NombreLista = NombreLista;
    }

    public String getNombreLista() {
        return NombreLista;
    }

    public void setNombreLista(String NombreLista) {
        this.NombreLista = NombreLista;
    }

    public List<Cancion> getCanciones() {
        return Canciones;
    }

    public void setCanciones(List<Cancion> Canciones) {
        this.Canciones = Canciones;
    }
    
    public void addCancion(String NombreCancion) {
        Canciones.add(FabricaCanciones.CrearItem(NombreCancion));
    }
    
    public void ImprimirLista() {
        String out = "\nPlayList > " + NombreLista;
        for (Cancion playItem : Canciones) {
            out += "\n\t" + playItem.toString();
        }
        System.out.println(out);
    }
    
    
}





------------------------------------------------------
-------------Paquete: flyweight ----------------
----------- Clase: FlyweightMain.java --------------
----------------- Tipo: Main() -----------------------
------------------------------------------------------
/*
 * Asignatura: Patrones de Diseño de Software 
 * Patrón Estructural - > Flyweight
 * Tipo de Clase: Main()
 */
package flyweight;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;

import implementacion.FabricaCanciones;
import implementacion.ListaReproduccion;

/**
 *
 * @author Fabrizio Bolaño
 */
public class FlyweightMain {

    private static final String[] NombreCanciones = new String[1000];
    private static final String[] NombresListas = new String[4100000];
    private static final List<ListaReproduccion> Listas = new ArrayList<>();
        
    public static void main(String[] args) {
        System.out.println(""
            + "Proceso de creación de listas de reproducción iniciado,\n"
            + "este proceso puede ser muy retrasado debido a la gran cantidad de objetos\n"
            + "que se creará, por favor espere un momento hasta que \n"
            + "sea notificado de que el proceso ha terminado..");
        
        Runtime runtime = Runtime.getRuntime();
        System.out.println("MaxMemory > " + (runtime.maxMemory()/1000000));
        FabricaCanciones.HabilitarFlyweight = true;
        InicializarArreglos();
        CrearListaDinamica();
        System.out.println("Total Listas > " + Listas.size());
        
        long memoryUsed = runtime.totalMemory() - runtime.freeMemory();
        System.out.println("Memoria Usada => " + (memoryUsed / 1000000));//
    
        
    }
    
    private static void CrearListaDinamica() {
        Random random = new Random();
        int p = 0;
        for (int c = 0; c < NombresListas.length; c++) {
            ListaReproduccion playList = new ListaReproduccion(NombresListas[c]);
            for (int i = 0; i < 10; i++) {
                int song = random.nextInt(NombreCanciones.length);
                playList.addCancion(NombreCanciones[song]);
            }
            Listas.add(playList);
            if(c!=0 && (c+1)%(NombresListas.length/10)==0){
                p+=10;
                System.out.println("Finalizado "+ p +"%");
                System.out.println("Listas Creadas " + Listas.size());
            }
        }
    }
        
    private static void InicializarArreglos() {
        for (int c = 0; c < NombreCanciones.length; c++) {
            NombreCanciones[c] = "Song " + (c + 1);
        }

        for (int c = 0; c < NombresListas.length; c++) {
            NombresListas[c] = "PlayList " + (c + 1);
        }
    }
}
