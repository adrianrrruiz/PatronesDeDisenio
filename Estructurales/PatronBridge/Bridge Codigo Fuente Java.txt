
----------------------------------------------------------
------------PATRON ESTRUCTURAL BRIDGE  ------------------
----------------------------------------------------------


----------------------------------------------------------
------------------Paquete: encriptacion ------------------
--------------- Clase: InterfaceEncriptar ----------------
------------------- Tipo: Interface ----------------------
----------------------------------------------------------
/*
 * Asignatura: Patrones de Diseño de Software 
 * Patrón Estructural - > Bridge
 * Tipo de Clase: Interface
 * Interface común para todas las implementaciones de algoritmos de encriptamiento.
 */
package encriptacion;

/**
 *
 * @author Fabrizio Bolaño
 */
public interface InterfaceEncriptar {
    public String encryptar(String message, String password) throws Exception;
    
}



----------------------------------------------------------
------------------Paquete: encriptacion ------------------
--------------- Clase: ProcesoEncriptarAES ---------------
--------------------- Tipo: java -------------------------
----------------------------------------------------------
/*
 * Asignatura: Patrones de Diseño de Software 
 * Patrón Estructural - > Bridge
 * Tipo de Clase: Java
 * Clase que hereda de InterfaceEncriptar y encripta el mensaje mediante el algoritmo AES.
 */
package encriptacion;

import java.security.Key;
import java.util.Base64;
import javax.crypto.Cipher;
import javax.crypto.spec.SecretKeySpec;

/**
 *
 * @author Fabrizio Bolaño
 */
public class ProcesoEncriptarAES implements InterfaceEncriptar {

    @Override
    public String encryptar(String message, String password) throws Exception {
        Key key = new SecretKeySpec(password.getBytes(), "AES");
        Cipher c = Cipher.getInstance("AES");
        c.init(Cipher.ENCRYPT_MODE, key);
        byte[] encVal = c.doFinal(message.getBytes());
        Base64.Encoder encoder = Base64.getEncoder();
        String encodedString= encoder.encodeToString(encVal);
        return encodedString;
        
    }
    
}


----------------------------------------------------------
------------------Paquete: encriptacion ------------------
--------------- Clase: ProcesoEncriptarDES ---------------
--------------------- Tipo: java -------------------------
----------------------------------------------------------
/*
 * Asignatura: Patrones de Diseño de Software 
 * Patrón Estructural - > Bridge
 * Tipo de Clase: Java
 * Clase que hereda de InterfaceEncriptar y encripta el mensaje mediante el algoritmo DES.
 */
package encriptacion;

import java.util.Base64;
import javax.crypto.Cipher;
import javax.crypto.SecretKey;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.DESKeySpec;

/**
 *
 * @author Fabrizio Bolaño
 */
public class ProcesoEncriptarDES implements InterfaceEncriptar {

    @Override
    public String encryptar(String message, String password) throws Exception {
        DESKeySpec dks = new DESKeySpec(message.getBytes());
        SecretKeyFactory skf = SecretKeyFactory.getInstance("DES");
        SecretKey desKey = skf.generateSecret(dks);
        Cipher desCipher = Cipher.getInstance("DES/ECB/PKCS5Padding");
        desCipher.init(Cipher.ENCRYPT_MODE, desKey);
        Base64.Encoder encoder = Base64.getEncoder();
        String encodedString= encoder.encodeToString(desCipher.doFinal(message.getBytes()));
        return encodedString;
    }
    
}



----------------------------------------------------------
------------------Paquete: encriptacion ------------------
--------------- Clase: ProcesoSinEncriptar ---------------
--------------------- Tipo: java -------------------------
----------------------------------------------------------
/*
 * Asignatura: Patrones de Diseño de Software 
 * Patrón Estructural - > Bridge
 * Tipo de Clase: Java
 * Clase que hereda de InterfaceEncriptar y regresa el mensaje sin ningún proceso de encriptación.
 */
package encriptacion;

/**
 *
 * @author Fabrizio Bolaño
 */
public class ProcesoSinEncriptar implements InterfaceEncriptar {

    @Override
    public String encryptar(String message, String password) throws Exception {
        return message;
    }
    
}


----------------------------------------------------------
------------------Paquete: implementacion ----------------
----------- Clase: InterfaceMensajeEncriptacion ----------
------------------ Tipo: Interface------------------------
----------------------------------------------------------
/*
 * Asignatura: Patrones de Diseño de Software 
 * Patrón Estructural - > Bridge
 * Tipo de Clase: Interface
 * Interface que define la estructura que deberán tener las clases puente.
 * Mediante esta interface el cliente se comunicará con los algoritmos de encriptamiento concretos..
 */
package implementacion;
import encriptacion.InterfaceEncriptar;
/**
 *
 * @author Fabrizio Bolaño
 */
public interface InterfaceMensajeEncriptacion {
    public String EncryptarMensaje(String message, String password)throws Exception;
}


----------------------------------------------------------
------------------Paquete: implementacion ----------------
----------- Clase: PuenteMensajeEncriptacion -------------
------------------ Tipo: java ---------------------------
----------------------------------------------------------
/*
 * Asignatura: Patrones de Diseño de Software 
 * Patrón Estructural - > Bridge
 * Tipo de Clase: Java
 * Clase que representa al bridge o puente..
 * La clase implementa InterfaceMensajeEncriptacion y delega la responsabilidad al método de encriptamiento asignado durante la creación del objeto.
 */
package implementacion;
import encriptacion.InterfaceEncriptar;
/**
 *
 * @author Fabrizio Bolaño
 */
public class PuenteMensajeEncriptacion implements InterfaceMensajeEncriptacion {
    private InterfaceEncriptar ProcesoEncryptacion;
    
    public PuenteMensajeEncriptacion(InterfaceEncriptar ProcesoEncryptacion){
        this.ProcesoEncryptacion = ProcesoEncryptacion;
    }
    
    @Override
    public String EncryptarMensaje(String message, String password) throws Exception {
        return ProcesoEncryptacion.encryptar(message, password);
    }
    
}




------------------------------------------------------
-------------Paquete: patronbridge -------------------
----------- Clase: PatronBridgeMain.java -------------
----------------- Tipo: Main() -----------------------
------------------------------------------------------
/*
 * Asignatura: Patrones de Diseño de Software 
 * Patrón Estructural - > Bridge
 * Tipo de Clase: Main()
 */

package patronbridge;
import encriptacion.ProcesoEncriptarAES;
import encriptacion.ProcesoEncriptarDES;
import encriptacion.ProcesoSinEncriptar;
import implementacion.PuenteMensajeEncriptacion;
import implementacion.InterfaceMensajeEncriptacion;

/**
 *
 * @author Fabrizio Bolaño
 */
public class PatronBridgeMain {
    
    public static void main(String[] args) {
     InterfaceMensajeEncriptacion FormatoAES = new PuenteMensajeEncriptacion(new ProcesoEncriptarAES());
     InterfaceMensajeEncriptacion FormatoDES = new PuenteMensajeEncriptacion(new ProcesoEncriptarDES());
     InterfaceMensajeEncriptacion SinFormato = new PuenteMensajeEncriptacion(new ProcesoSinEncriptar());
     
      try {
            final String message = "<Curso><Nombre>Patrones de Diseño de Software</Nombre></Curso>";
            String messageAES = FormatoAES.EncryptarMensaje(message, "HG58YZ3CR9123456");
            System.out.println("Formato AES > " + messageAES + "\n");
            
            String messageDES = FormatoDES.EncryptarMensaje(message, "XMzDdG4D03CKm2Ix");
            System.out.println("Formato DES > " + messageDES + "\n");
            
            String messageNO = SinFormato.EncryptarMensaje(message, null);
            System.out.println("Sin Formato > " + messageNO + "\n");
        } catch (Exception e) {
            e.printStackTrace();
        }
        
        
        
    }
    
}



