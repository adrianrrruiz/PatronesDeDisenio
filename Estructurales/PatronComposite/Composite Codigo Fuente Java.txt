----------------------------------------------------------
----------- PATRON ESTRUCTURAL COMPOSITE -----------------
----------------------------------------------------------



----------------------------------------------------------
------------Paquete: composicion.productos ---------------
--------------- Clase: AbstraccionProducto----------------
------------------- Tipo: Abstracta ---------------------
----------------------------------------------------------
/*
 * Asignatura: Patrones de Diseño de Software 
 * Patrón Estructural - > Composite
 * Tipo de Clase: Abstracta
 */

package composicion.productos;

/**
 *
 * @author Fabrizio Bolaño
 */
public abstract class AbstraccionProducto {
    protected String nombre;
    protected double precio;
    
    public AbstraccionProducto(String nombre, double precio) {
        super();
        this.nombre = nombre;
        this.precio = precio;
    }

    public String getNombre() {
        return nombre;
    }

    public void setNombre(String nombre) {
        this.nombre = nombre;
    }

    public double getPrecio() {
        return precio;
    }

    public void setPrecio(double precio) {
        this.precio = precio;
    }

}



----------------------------------------------------------
------------Paquete: composicion.productos ---------------
-------- Clase: ConfiguracionCompuestaProducto------------
-------------------- Tipo: Java  -------------------------
----------------------------------------------------------
/*
 * Asignatura: Patrones de Diseño de Software 
 * Patrón Estructural - > Composite
 * Tipo de Clase: Java
 * Clase para configurar los productos compuestos.
 * Hereda de AbstraccionProducto para mantener una estructura compatible con los productos de configuración simple.
 */
package composicion.productos;

import java.util.ArrayList;
import java.util.List;

/**
 *
 * @author Fabrizio Bolaño
 */
public class ConfiguracionCompuestaProducto extends AbstraccionProducto {
    private List<AbstraccionProducto> productos = new ArrayList<AbstraccionProducto>();

    public ConfiguracionCompuestaProducto(String nombre) {
        super(nombre, 0);
    }

    @Override
    public double getPrecio() {
        double preciolocal = 0d;
        for (AbstraccionProducto child : productos) {
            preciolocal += child.getPrecio();
        }
        return preciolocal;
    }

    @Override
    public void setPrecio(double precio) {
        throw new UnsupportedOperationException();
    }
    
     public void AgregarProducto(AbstraccionProducto producto) {
        this.productos.add(producto);
    }
    
    public boolean RemoverProductos(AbstraccionProducto producto) {
        return this.productos.remove(producto);
    }
}



----------------------------------------------------------
------------Paquete: composicion.productos ---------------
--------- Clase: ConfiguracionSimpleProducto ------------
-------------------- Tipo: Java  -------------------------
----------------------------------------------------------
/*
 * Asignatura: Patrones de Diseño de Software 
 * Patrón Estructural - > Composite
 * Tipo de Clase: Java
 * Representa la forma más básica de un producto.
 * No podrá estar compuesta por otros elementos.
 */
package composicion.productos;

/**
 *
 * @author Fabrizio Bolaño
 */
public class ConfiguracionSimpleProducto extends AbstraccionProducto {
     protected String marca;
     
     public ConfiguracionSimpleProducto(String nombre, double precio, String marca) {
        super(nombre, precio);
        this.marca = marca;
    }

    public String getMarca() {
        return marca;
    }

    public void setMarca(String marca) {
        this.marca = marca;
    }
     
}

----------------------------------------------------------
------------Paquete: composicion.ordenes -----------------
----------------- Clase: OrdenVenta ----------------------
------------------- Tipo: Java ---------------------------
----------------------------------------------------------
/*
 * Asignatura: Patrones de Diseño de Software 
 * Patrón Estructural - > Composite
 * Tipo de Clase: Java
 * Clase que simula un punto de venta.
 */
package composicion.ordenes;

import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.util.ArrayList;
import java.util.List;
import composicion.productos.AbstraccionProducto;


/**
 *
 * @author Fabrizio Bolaño
 */
public class OrdenVenta {
    private long CodigoOrden;
    private String Cliente;
    private List<AbstraccionProducto> productos = new ArrayList<AbstraccionProducto>();
    
    public OrdenVenta(long CodigoOrden, String Cliente) {
        super();
        this.CodigoOrden = CodigoOrden;
        this.Cliente = Cliente;
    }
    
     public double getPrecio() {
        double preciolocal = 0d;
        for (AbstraccionProducto child : productos) {
            preciolocal += child.getPrecio();
        }
        return preciolocal;
    }
    
    public void AgregarProducto(AbstraccionProducto producto) {
        productos.add(producto);
    }
    
    public void ImprimirOrdenVenta() {

        NumberFormat formater = new DecimalFormat("###,##0.00");
        System.out.println("\\\n============================================="
                + "\nCodigo_Orden: " + CodigoOrden + "\nCliente: " + Cliente 
                + "\nProductos:\n");
        for (AbstraccionProducto prod : productos) {
            System.out.println(prod.getNombre() + "\t\t\t$ " 
                    + formater.format(prod.getPrecio()));
        }
        System.out.println("Total: " + formater.format(getPrecio()) 
                + "\n=============================================");
    }

    public long getCodigoOrden() {
        return CodigoOrden;
    }

    public void setCodigoOrden(long CodigoOrden) {
        this.CodigoOrden = CodigoOrden;
    }

    public String getCliente() {
        return Cliente;
    }

    public void setCliente(String Cliente) {
        this.Cliente = Cliente;
    }

    public List<AbstraccionProducto> getProductos() {
        return productos;
    }

    public void setProductos(List<AbstraccionProducto> productos) {
        this.productos = productos;
    }
    
    
    
}


------------------------------------------------------
-------------Paquete: patroncomposite ----------------
----------- Clase: PatronComposite.java --------------
----------------- Tipo: Main() -----------------------
------------------------------------------------------
/*
 * Asignatura: Patrones de Diseño de Software 
 * Patrón Estructural - > Composite
 * Tipo de Clase: Main()
 */
package patroncomposite;
import java.util.Random;
import composicion.productos.ConfiguracionCompuestaProducto;
import composicion.productos.ConfiguracionSimpleProducto;
import composicion.ordenes.OrdenVenta;

/**
 *
 * @author Fabrizio Bolaño
 */
public class PatronComposite {
    private final Random random = new Random();

    private ConfiguracionSimpleProducto ram4gb;
    private ConfiguracionSimpleProducto ram8gb;
    private ConfiguracionSimpleProducto disk500gb;
    private ConfiguracionSimpleProducto disk1tb;
    private ConfiguracionSimpleProducto cpuAMD;
    private ConfiguracionSimpleProducto cpuIntel;
    private ConfiguracionSimpleProducto smallCabinete;
    private ConfiguracionSimpleProducto bigCabinete;
    private ConfiguracionSimpleProducto monitor20inch;
    private ConfiguracionSimpleProducto monitor30inch;
    private ConfiguracionSimpleProducto simpleMouse;
    private ConfiguracionSimpleProducto gammerMouse;

    private ConfiguracionCompuestaProducto gammerPC;
    private ConfiguracionCompuestaProducto homePC;
    private ConfiguracionCompuestaProducto pc2x1;
    
    private void CreardProductos() {
        //Configuraciòn de productos simples
        ram4gb = new ConfiguracionSimpleProducto("RAM 4GB", 750, "KingStone");
        ram8gb = new ConfiguracionSimpleProducto("RAM 8GB", 1000, "KingStone");
        disk500gb = new ConfiguracionSimpleProducto("HDD 500GB", 1500, "ACME");
        disk1tb = new ConfiguracionSimpleProducto("HDD 1TB", 2000, "ACME");
        cpuAMD = new ConfiguracionSimpleProducto("AMD phenon", 4000, "AMD");
        cpuIntel = new ConfiguracionSimpleProducto("Intel i7", 4500, "Intel");
        smallCabinete = new ConfiguracionSimpleProducto("Small cabinet", 2000, "ExCom");
        bigCabinete = new ConfiguracionSimpleProducto("Big Cabinet", 2200, "ExCom");
        monitor20inch = new ConfiguracionSimpleProducto("Display 20'", 1500, "HP");
        monitor30inch = new ConfiguracionSimpleProducto("Display 30'", 2000, "HP");
        simpleMouse = new ConfiguracionSimpleProducto("Simple mouse", 150, "Genius");
        gammerMouse = new ConfiguracionSimpleProducto("Gammer mouse", 750, "Alien");

        //Producto Compuesto con: Gammer pc de 8gb ram,HDD 1tb, Intel i7 processor
        //large cabinet,display 30' y one gammer mouse.
        gammerPC = new ConfiguracionCompuestaProducto("Gammer PC");
        gammerPC.AgregarProducto(ram8gb);
        gammerPC.AgregarProducto(disk1tb);
        gammerPC.AgregarProducto(cpuIntel);
        gammerPC.AgregarProducto(bigCabinete);
        gammerPC.AgregarProducto(monitor30inch);
        gammerPC.AgregarProducto(gammerMouse);

        //Paquete: Home PC con RAM 4gb, HDD 500gb, AMD Phenon processor
        //small Cabinet, dsplay 20' y simple mouse.
        homePC = new ConfiguracionCompuestaProducto("Home PC");
        homePC.AgregarProducto(ram4gb);//
        homePC.AgregarProducto(disk500gb);
        homePC.AgregarProducto(cpuAMD);
        homePC.AgregarProducto(smallCabinete);
        homePC.AgregarProducto(monitor20inch);
        homePC.AgregarProducto(simpleMouse);

        //Combo confirmado por 2 paquetes, Gammer PC + Home PC
        pc2x1 = new ConfiguracionCompuestaProducto("Pack PC Gammer + Home PC");
        pc2x1.AgregarProducto(gammerPC);
        pc2x1.AgregarProducto(homePC);
    }
    
    private void OrdenVentaParaConfiguracionSimpleProducto() {

        OrdenVenta OrdenConfiguracionSimple = new OrdenVenta(random.nextInt(), "Hector Lavoe");
        OrdenConfiguracionSimple.AgregarProducto(ram4gb);
        OrdenConfiguracionSimple.AgregarProducto(disk1tb);
        OrdenConfiguracionSimple.AgregarProducto(simpleMouse);
        OrdenConfiguracionSimple.ImprimirOrdenVenta();
    }
    
    private void OrdenVentaGammerPC() {
        OrdenVenta gammerOrdenVenta = new OrdenVenta(1, "Ismael Rivera");
        gammerOrdenVenta.AgregarProducto(gammerPC);
        gammerOrdenVenta.ImprimirOrdenVenta();
    }
    
    private void OrdenVentaHomePC() {
        OrdenVenta homeOrdenVenta = new OrdenVenta(2, "Celia Cruz");
        homeOrdenVenta.AgregarProducto(homePC);
        homeOrdenVenta.ImprimirOrdenVenta();
    }
    private void OrdenVentaCombo() {
        OrdenVenta comboOrdenVenta = new OrdenVenta(3, "Paquete 2x1 en PC");
        comboOrdenVenta.AgregarProducto(pc2x1);
        comboOrdenVenta.ImprimirOrdenVenta();
    }
    
     private void OrdenVentaMega() {
        OrdenVenta OrdenVentaPersonalizada = new OrdenVenta(4, "Tito Nieves");
        OrdenVentaPersonalizada.AgregarProducto(homePC);
        OrdenVentaPersonalizada.AgregarProducto(ram8gb);
        OrdenVentaPersonalizada.AgregarProducto(ram4gb);
        OrdenVentaPersonalizada.AgregarProducto(monitor30inch);
        OrdenVentaPersonalizada.AgregarProducto(gammerMouse);
        OrdenVentaPersonalizada.ImprimirOrdenVenta();
    }
    
    public static void main(String[] args) {
        PatronComposite main = new PatronComposite();
        main.CreardProductos();

       // main.OrdenVentaParaConfiguracionSimpleProducto();
       // main.OrdenVentaHomePC();
       // main.OrdenVentaGammerPC();
       // main.OrdenVentaCombo();
        main.OrdenVentaMega();
        
        
    }
    
}



